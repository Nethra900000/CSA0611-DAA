def median_of_medians(arr, k):
    def partition(arr, l, r, pivot_idx):
        pivot_val = arr[pivot_idx]
        arr[pivot_idx], arr[r] = arr[r], arr[pivot_idx]
        store_idx = l
        for i in range(l, r):
            if arr[i] < pivot_val:
                arr[store_idx], arr[i] = arr[i], arr[store_idx]
                store_idx += 1
        arr[store_idx], arr[r] = arr[r], arr[store_idx]
        return store_idx

    def select(arr, l, r, k):
        if l == r:
            return arr[l]
        pivot_idx = l
        while True:
            pivot_idx = partition(arr, l, r, pivot_idx)
            if pivot_idx == k:
                return arr[k]
            elif k < pivot_idx:
                r = pivot_idx - 1
            else:
                l = pivot_idx + 1

    n = len(arr)
    if k > 0 and k <= n:
        return select(arr, 0, n - 1, k - 1)
    else:
        return None

# Test Cases
arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k1 = 6
print(median_of_medians(arr1, k1)) 

arr2 = [23, 17, 31, 44, 55, 21, 20, 18, 19, 27]
k2 = 5
print(median_of_medians(arr2, k2))  
output1=6 
Output: 21
